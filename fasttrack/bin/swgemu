#!/bin/bash
#
# swgemu - Control swgemu server on this machine
#
# Author: Lord Kator <lordkator@swgemu.com>
#
# Created: Sun Jan  3 13:30:33 UTC 2016
#

# TODO make these use global config
BUILD_DIR=~/workspace/Core3/MMOCoreORB
RUN_DIR=~/workspace/Core3/MMOCoreORB/bin

main() {
    if [ $(id -u) -eq 0 ]; then
	echo "** DO NOT RUN THIS AS ROOT **"
	exit 250
    fi

    if get_lock; then
	:
    else
	panel_pause 251
	exit 251
    fi

    local panel=false

    if [ "X$1" == "X--panel" ]; then
        panel=true
	shift
    fi

    local cmd=$1
    local ret=255

    shift

    case $cmd in
	'backup' ) server_backup ;;
	'build' ) server_build ;;
	'latest' ) server_latest "$@" ;;
	'postdebug' ) post_debug "$@";;
	'send' ) server_send "$@" ;;
	'start' ) server_start ;;
	'status' ) server_status ;;
	'stop' ) server_stop;;
	'version' ) show_version;;
	* ) echo "Usage: $0 {backup|build|postdebug|latest|send|start|status|stop|version}"; exit 1 ;;
    esac

    ret=$?

    release_lock

    if $panel; then
	panel_pause $ret
    fi

    exit $ret
}

ICON=/home/vagrant/ZonamaDev/fasttrack/assets/swgemu_icon.png

server_start() {
    if server_status; then
	echo "** Already running **"
	if yorn "Would you like to stop the sever?"; then
	    server_stop
	else
	    release_lock
	    screen -D -RR swgemu-server
	fi
	retun 0
    fi

    if ~/bin/tre_check; then
	:
    else
	echo
	echo "************************************************************************"
	echo "**                                                                    **"
	echo "** You need to copy the original game .tre files in to the guest.     **"
	echo "**                                                                    **"
	echo "** On the host from your ZonamaDev/fasttrack server try this command: **"
	echo "**                                                                    **"
	echo "**    ./tre.sh                                                        **"
	echo "**                                                                    **"
	echo "** From inside of a Git Bash window.                                  **"
	echo "**                                                                    **"
	echo "************************************************************************"
	echo
	return 13
    fi

    server_update_ip

    cd "${RUN_DIR}"

    if [ ! -x core3 ]; then
	echo "** Server not built? **"

	if yorn "Would you like to build the server now?"; then
	    if server_build; then
		:
	    else
		return $?
	    fi
	else
	    echo "** USER ABORTED **"
	    return 2
	fi
    fi

    for i in 5 4 3 2 1
    do
	let "j=$i-1"
	mv o_screenlog.${j}.gz o_screenlog.${i}.gz 2> /dev/null
    done

    mv screenlog.0 o_screenlog.0

    gzip -f o_screenlog.0 &

    # Start server detached
    screen -dmS swgemu-server -L gdb --command=$HOME/bin/gdb_settings  ./core3

    # Free lock
    release_lock

    # TODO Spawn a watcher to alert when the server is up
    ~/bin/sentinel --stop-at-init &

    # Join the session so they can watch along..
    exec screen -D -RR swgemu-server
}

server_status() {
    local pid=$(pgrep core3)
    local verbose=true

    if [ "X$1" = "X-q" ]; then
        verbose=false
    fi

    if [ -z "$pid" ]; then
	if $verbose; then
	    echo "Server is not running"
	fi
	return 1
    fi

    local state=$(ps -p $pid -ho state)

    shopt -s nocasematch

    if [[ "${state}" != "S" && "${state}" != "R" ]]; then
	echo -e $(tput setab 3;tput setaf 0)"WARNING: Server state is ${state}, it is not running or sleeping, something is wrong!"$(tput sgr0)

	if $verbose; then
	    return 2
	fi
    fi

    if $verbose; then
	read uptime <<< $(ps -p $pid -ho etime)

	echo "Server running on $pid, uptime: $uptime"
    fi

    return 0
}

server_send() {
    if server_status -q; then
	:
    else
	echo "** Server not running **"
	return 0
    fi

    cd ${RUN_DIR}

    local string="$*^M"

    local sz=$(stat -c '%s' screenlog.0)

    screen -S swgemu-server -X stuff "$string"

    ~/bin/sentinel --stop-next-prompt --tail --seek $sz

    return 1
}

server_stop() {
    if server_status -q; then
	:
    else
	echo "** Server not running **"
	return 0
    fi

    cd "${RUN_DIR}"

    if [ ! -f "screenlog.0" ]; then
	echo "** screenlog is missing, did you run the server from $0?"
	return 1
    fi

    local sz=$(stat -c '%s' screenlog.0)
    local pid=$(pgrep core3)
    local state=$(ps -p $pid -ho state)
    local ppid=$(ps -p $pid -ho ppid)
    local pcmd=$(ps -p $ppid -ho cmd)
    local gdb=false

    if [[ $pcmd =~ ^gdb ]]; then
	gdb=true
	echo "** running under gdb **"
    fi

    echo "** send 'save' command to server **"

    # Just in case don't compare case
    shopt -s nocasematch

    if [[ "${state}" == "S" || "${state}" == "R" ]]; then
	screen -S swgemu-server -X stuff "save^M"

	# TODO add timeout?
	if ~/bin/sentinel --stop-next-backup --seek $sz; then
	    echo "** server backup complete **"
	else
	    echo "** sentinel failed with err=$?"
	fi
    else
	echo -e $(tput setab 3;tput setaf 0)"WARNING: Server state is ${state}, it is not running or sleeping, something is wrong!"$(tput sgr0)
    fi

    echo -n "** sending SIGINT to core3($pid).."

    if $gdb; then
	echo -n ". State: "
    fi

    kill -INT $pid

    while pgrep core3 > /dev/null 2>&1
    do
	if $gdb; then
	    # Look for state 't'
	    local state=$(ps -p $pid -ho state)
	    echo -n $state

	    if [[ "${state}" == "t" || "${state}" == "Z" ]]; then
		echo -en "\n** killing gdb($ppid) **"
		kill $ppid
		break
	    fi
	else
	    echo -n "."
	fi
	sleep 1
    done

    echo -e $(tput setaf 2)"\n** server stopped **"$(tput sgr0)

    return 0
}

server_build() {
    if server_status; then
	echo "** Server is running **"

	if yorn "Would you like to join the console so you can shut it down?"; then
	    screen -D -RR swgemu-server
	else
	    echo "** USER ABORTED BUILD **"
	    return 12
	fi
    fi

    cd "${BUILD_DIR}"

    if [ ! -f build/unix/config.log ]; then
	if time make config; then
	    :
	else
	    echo "** make config failed **"
	    return 10
	fi
    fi

    if time make -k build; then
	echo "** BUILD SUCCESS IN $SECONDS SECOND(S) **"
	return 0
    else
	echo "** BUILD FAILED **"
	return 11
    fi
}

server_update_ip() {
    local server_ip='127.0.0.1'

    if [ -f ~/.force_ip ]; then
	server_ip=$(cat ~/.force_ip)
    fi

    local i2=$(netstat -ni|grep eth2)

    # If they have an eth2 they might have enabled the "public" interface
    if [ -n "$i2" ]; then
	# Find the default route
	read -a aa <<<$(ip -o route show|egrep '^default')
	# What's the address of the interface with default route?
	read -a aa <<<$(ip -o -4 addr show ${aa[4]})
	# Let's suggest that ip
	server_ip=$(echo ${aa[3]}|cut -d/ -f1)
    fi

    echo "Suggested IP: $server_ip"

    eval $(~/bin/get_config --bash ZoneGalaxyID)

    mysql swgemu -ve "UPDATE galaxy SET address = '${server_ip}' WHERE galaxy_id = ${ZoneGalaxyID}";
    mysql swgemu -ve "UPDATE galaxy SET name = 'swgemudev' WHERE galaxy_id = ${ZoneGalaxyID} AND name = 'Core3'";
    sed -e "/server_ip/s/server_ip = '[^']*'/server_ip = '"${server_ip}"'/" -i /home/vagrant/server/emuyoda/yoda-config.lua
}

server_backup() {
    if server_status; then
	echo "** Server is running **"

	if yorn "Would you like to join the console so you can shut it down?"; then
	    screen -D -RR swgemu-server
	else
	    echo "** USER ABORTED BACKUP **"
	    return 12
	fi
    fi

    # NOTE: not the most space efficent way to do it but will work as it's simple for people to understand the format

    BUDIR=~/server/swgemu/backups

    mkdir -p ${BUDIR} 2> /dev/null && echo "** Created ${BUDIR} directory **"

    TMPDIR=$(mktemp -d ${BUDIR}/swgemu-backup-temp.XXXXXX)

    (
	trap 'set +xe;st=$?;echo "** UNEXPECTED EXIT=$st, PARTIAL BACKUP LEFT IN ${TMPDIR} **";rm -f ${SWGEMU_LOCKFILE};exit $st' 0

	NOW=$(date +%s)

	STAMP=$(date -d@${NOW} '+%Y%m%d%H%M%S%Z')

	BUFILE=${BUDIR}/swgemu-backup-${STAMP}.tar.gz

	echo "** Backing up to ${BUFILE} **"

	set -xe

	mysqldump --opt swgemu > "${TMPDIR}/mysqldump.sql"

	cd "${RUN_DIR}"

	cp -rv conf databases scripts/managers/resource_manager_spawns.lua ${TMPDIR}

	cd ${TMPDIR}

	files=$(echo *)

	read sz dir <<< $(du -s --block-size=1 .)

	# TODO - Other useful metadata here?
	echo '{"backup_size_bytes":"'${sz}'","backup_date":"'$(date -d@${NOW})'","backup_isodate":"'$(date -d@${NOW} -Iseconds)'","backup_unixepoc":"'${NOW}'"}' > ${TMPDIR}/metadata.json

	# TODO do we need the __db files if the db is closed?
	tar cvzf ${BUFILE} metadata.json $(find $files -type f|sort)

	rm -fr ${TMPDIR}

	set +xe

	trap - 0

	echo "** SUCCESS: Backup saved to ${BUFILE} **"
    )

    return 0
}

show_version()
{
    pushd $(dirname ${BASH_SOURCE[0]}) > /dev/null
    local me=$(pwd -P)'/'$(basename ${BASH_SOURCE[0]})
    popd > /dev/null
    local tmp=$(mktemp /tmp/swgemu-version-temp.XXXXXX)

    # Hack to avoid prompting user for pw's so they just fail instantly if not setup
    # Nothing nicer until git 2.3 :-(
    local tmpssh=$(mktemp ~/.swgemu-ssh-temp.XXXXXX.tmp)
    echo 'ssh -oBatchMode=yes "$@"' > $tmpssh
    chmod 700 "${tmpssh}"
    export GIT_SSH="${tmpssh}"

    local git_remote=$(cd ${BUILD_DIR};git ls-remote origin refs/heads/unstable 2>> ${tmp} | cut -f1)
    local git_local=$(cd ${BUILD_DIR};git rev-parse refs/heads/unstable 2>> ${tmp})
    local zd_tag=$(cd ~/ZonamaDev;git describe --tag 2>> ${tmp})
    local me_md5=$(md5sum < $me|cut -d' ' -f1 2>&1)

    unset GIT_SSH
    rm -f "${tmpssh}"

    read name url junk <<< $(cd ${BUILD_DIR};git remote -v 2>>${tmp})

    local errors=$(tr '\r' ' ' <${tmp})

    rm -f "${tmp}"

    local json="{ "

	json="${json} "'"server_version":{"remote-'${name}'":"'${url}'","remote-git-tag":"'${git_remote}'","local-get-tag":"'${git_local}'","asof_isodate":"'$(date -Iseconds)'","swgemu-script":"'${me}'","swgemu-md5":"'${me_md5}'","zd-tag":"'${zd_tag}'","collection_errors":"'${errors}'"}'
	json="${json}, "'"box_buildinfo":'$(< /.swgemudev.builinfo.json)

    json="$json }"

    echo $json | python -m json.tool
}

post_debug()
{
    local title="$1"
    local desc="$2"
    local gori="$3"

    echo -e "**\n** Post Debug Message\n**"

    echo -e "** This will create a dump of numerous files and status information and post them to the internet via a github gist or an issue.\n**"

    echo -e "** Attempts are made to make sure the post does not include sensitive data but we cannot 100% guarantee that sensitive data won't be posted.\n**"

    echo -e "** If you're worried you can follow the prompt to post a [G]ist and DO NOT LOGIN to GitHub so your gist will be 100% annonymous.\n**"

    echo -e "** By default if you do post a gist and login the gist is created as private so you can review it before sharing.\n**"

    echo -e "** Most people will want to post an [I]ssue and login to github to get immediate feedback and quicker support.\n**"

    if [ -z "$gori" ]; then
	read -p 'Post a [G]ist or an [I]ssue? ' gori
	echo
    fi

    if [ -z "$title" ]; then
	read -p "Title: " title
	echo
    fi

    if [ -z "$desc" ]; then
	read -p "One-line description of your problem: " desc
	echo
    fi

    local url=""

    case $gori in
	[Ii]* )
	    type ghi > /dev/null 2>&1 || (set -x;sudo gem install ghi)

	    if git config --get ghi.token; then
		:
	    else
		echo "Please login to github to post an issue:"
		read -p "What is your github username? " ghuser

		if [ -z "$ghuser" ]; then
		    echo "** Can't post an issues without a github account, please try again with a gist or provide your github username."
		    echo "** ABORTED BY USER **"
		    return 2
		fi

		ghi config --auth $ghuser
	    fi
	    echo "** Posting Issue..."
	    local issue=$(ghi open --label "type/automated-help" -m "$(post_debug_body)" -- lordkator/ZonamaDev 2>&1)
	    echo "** Looking for issue id"
	    local issue_num=$(echo "$issue"|sed -ne '1s!^#\([0-9][0-9]*\):.*!\1!p')

	    if [ -n "$issue_num" ]; then
		echo "** Found issue #${issue_num}"
		url="https://github.com/lordkator/ZonamaDev/issues/"${issue_num}
	    else
		echo -e "WARNING: Unexpected output from ghi:\n\t${issue}\n\nGET HELP!"
	    fi
	    ;;
	* | [Gg]* )
	    type gist > /dev/null 2>&1 || (set -x;sudo gem install gist)

	    if [ ! -f ~/.gist ] && yorn "Would you like to use your github userid for this? "; then
		gist --login
	    fi

	    url=$(post_debug_body | gist -p -d "swgemu postdebug - ${title}" -f "ZonamaDev/post_debug-"$(date +%s)".md" 2>&1)
	    ;;
    esac

    if [ -z "$url" ]; then
	echo "** WARNING: Something seems to have failed, look for clues in any errors above."
	return 1
    fi

    echo -e "\nShare this URL to get help: ${url}"

    if xset q > /dev/null 2>&1; then
	local browser=$( (for i in chromium google-chrome chromium-browser firefox; do type -P $i; done)|head -1)
	nohup $browser $url > /dev/null 2>&1 &
    fi

    return 0
}

post_debug_body() {
    # The output here will be included in the post as github flavored markdown content
    # Note: Can't be too long as it goes into the command line with ghi and thus is limited
    #       see: xargs --show-limits < /dev/null
    #
    local debug_commands=(
	"show_version"
	"tail -5 ${HOME}/workspace/Initial_Core3_Build.log"
	"${HOME}/bin/get_config --bash 'Zone..'"
	"${HOME}/bin/get_config --bash 'Tre..'"
	"${HOME}/bin/tre_check"
	"tail -100 ${HOME}/workspace/Core3/MMOCoreORB/bin/screenlog.0"
	"tail -100 ${HOME}/workspace/Core3/MMOCoreORB/bin/log/core3.log"
	"uname -a"
	"df -h"
	"top -Hbn 1"
    )

    exec 2>&1
    echo -e "swgemu postdebug - ${title}\n\nZonamaDev Automated Post\n\n"
    date
    echo -e "\nDescription: ${desc}\n\n"

    # Check various status files
    echo -e '\nStatus Files:\n```\n'
    for i in ~/.*.ran
    do
       echo "$i: "$(<$i)
    done

    # Make sure commands don't try and use X windows
    local old_display="$DISPLAY"
    unset DISPLAY

    # Commands to run and capture ouput
    for cmd in "${debug_commands[@]}"
    do
	echo -e '\n```\n---\n'"${cmd}"'\n```\n'
	eval $cmd
    done
    echo -e '\n```'

    if [ -n "$old_display" ]; then
	export DISPLAY="${old_display}"
    fi
}

server_latest()
{
    if server_status; then
	echo "** Server is running **"

	if yorn "Would you like to shut it down?"; then
	    if server_stop; then
		:
	    else
		echo "** server stop error=$? **"
		return 15
	    fi
	else
	    echo "** USER ABORTED **"
	    return 16
	fi
    fi

    (
	set -xe
	cd ${BUILD_DIR}
	git stash save "swgemu-latest "$(date)
	git pull
	git stash pop
	cd ~/workspace/PublicEngine
	git pull
    )

    local ret=$?

    if [ $ret -gt 0 ]; then
	echo "** Latest pull failed, look at errors above for clues. **"
	return 17
    fi

    return $ret
}

yorn() {
  if tty -s; then
      echo -n -e "$@ Y\b" > /dev/tty
      read yorn < /dev/tty
      case $yorn in
	[Nn]* ) return 1;;
      esac
  fi

  return 0
}

panel_pause() {
    local ret=$1

    echo
    if [ $ret -eq 0 ]; then
	echo -e $(tput setaf 2)"\n** SUCCESS **\n"$(tput sgr0)
    else
	echo -e $(tput setab 3;tput setaf 0)"\nWARNING: ${cmd} command returned error code ${ret}\n"$(tput sgr0)
    fi

    read -p "Press <ENTER> to close the window: "
}

release_lock() {
    if $HAVELOCK; then
	rm -f ${SWGEMU_LOCKFILE}
    fi
}

get_lock() {
    ## Run LOCK
    export HAVELOCK=false
    local locktmp=$(mktemp /tmp/swgemu.lock-XXXXXX)
    export SWGEMU_LOCKFILE=/tmp/swgemu.lock

    echo "$$ "$(date +%s) > ${locktmp}

    if ln ${locktmp} ${SWGEMU_LOCKFILE} 2> /dev/null; then
	rm -f ${locktmp}
	export HAVELOCK=true
    else
	read pid tm_lock < ${SWGEMU_LOCKFILE}
	tm_now=$(date +%s)

	let "tm_delta=${tm_now} - ${tm_lock}"

	if kill -0 $pid; then
	    echo -e ">> PID $pid HAS HAD LOCK FOR ${tm_delta} SECOND(S) RUNNING:\n\n\t"$(ps -p $pid -ho cmd)"\n\nAborting, can't continue until other command is done."
	    return 1
	else
	    echo ">> Stealing lock from PID $pid which has gone away, locked ${tm_delta} second(s) ago"
	    if ln -f ${locktmp} ${SWGEMU_LOCKFILE}; then
		rm -f ${locktmp}
		read pid tm_lock < ${SWGEMU_LOCKFILE}
		if [ "$pid" -eq "$$" ]; then
		    echo ">> STOLE LOCK, PROCEEDING"
		else
		    echo ">> Can't steal lock, somone got in before us!? pid=${pid}"
		    return 2
		fi
	    else
		rm -f ${locktmp}
		echo ">> Failed to steal lock, **ABORT**"
		return 1
	    fi
	fi
    fi

    export HAVELOCK=true
    trap 'release_lock;' 0
}

main "$@"

exit 0
